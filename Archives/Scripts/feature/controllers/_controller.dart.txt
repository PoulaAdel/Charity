part of _<name>;

class _<Name>Controller extends GetxController {
  final scaffoldKey = GlobalKey<ScaffoldState>();

  // for handling _<name>s
  final LocalSecureStorage_<Name>s _localSecureStorage = Get.find();
  final Authentication_<Name>s _auth_<Name> = Get.find();
  final RestApi_<Name>s _api = Get.find();

  // for ui
  final ScrollController scrollController = ScrollController();
  var _<name>s = <_<Name>>[].obs;
  var isLoading = false.obs;

  // for authintication
  Rx<User?> currentUser = Rx<User?>(null);

  @override
  void onInit() {
    assignCurrentUser();
    fetch_<Name>s();
    super.onInit();
  }

  void assignCurrentUser() async {
    User? secureData = await _localSecureStorage.getUser;
    currentUser.value = secureData;
    update();
  }

  void logoutUser() {
    _auth_<Name>.logout();
    Get.offAllNamed(Routes.login);
  }

  void openDrawer() {
    if (scaffoldKey.currentState != null) {
      scaffoldKey.currentState!.openDrawer();
    }
  }

  void scrollToTop() {
    double start = 0;
    // scrollController.jumpTo(start);
    scrollController.animateTo(
      start,
      duration: const Duration(milliseconds: 100),
      curve: Curves.easeIn,
    );
  }

  SidebarHeaderData getSelectedProject() {
    return SidebarHeaderData(
      projectImage: const AssetImage(ImageRasterPath.logo1),
      projectName: "_<Name>",
      releaseTime: DateTime.now(),
    );
  }

  void fetch_<Name>s() async {
    isLoading.value = true;
    try {
      var fetched_<Name>s = await _api.get('_<name>s');
      _<name>s.value = (fetched_<Name>s as List)
          .map((json) => _<Name>.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed! ${e.toString()}');
    } finally {
      isLoading.value = false;
    }
  }

  void add_<Name>(_<Name> _<name>) async {
    isLoading.value = true;
    try {
      var new_<Name> = await _api.post('_<name>s', _<name>.toJson());
      _<name>s.add(_<Name>.fromJson(new_<Name>));
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed: ${e.toString()}');
    } finally {
      isLoading.value = false;
    }
  }

  void update_<Name>(_<Name> _<name>) async {
    isLoading.value = true;
    try {
      var updated_<Name> =
          await _api.put('_<name>s/${_<name>.pk}', _<name>.toJson());
      int index = _<name>s.indexWhere((s) => s.pk == _<name>.pk);
      if (index != -1) {
        _<name>s[index] = _<Name>.fromJson(updated_<Name>);
      }
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed: ${e.toString()}');
    } finally {
      isLoading.value = false;
    }
  }

  void delete_<Name>(int pk) async {
    isLoading.value = true;
    try {
      await _api.delete('_<name>s/$pk');
      _<name>s.removeWhere((_<name>) => _<name>.pk == pk);
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed to delete _<name>');
    } finally {
      isLoading.value = false;
    }
  }
}
