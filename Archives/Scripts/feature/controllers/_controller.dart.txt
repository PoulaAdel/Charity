part of _<name>;

class _<Name>Controller extends GetxController {
  final scaffoldKey = GlobalKey<ScaffoldState>();

  // for handling _<name>s
  final LocalSecureStorageServices _localSecureStorage = Get.find();
  final AuthenticationServices _authService = Get.find();
  final RestApiServices _api = Get.find();

  // for ui
  final ScrollController scrollController = ScrollController();
  var _<name>s = <_<Name>>[].obs;
  var isLoading = false.obs;

  final TextEditingController searchController = TextEditingController();

  // for authintication
  Rx<User?> currentUser = Rx<User?>(null);

  @override
  void onInit() {
    assignCurrentUser();
    fetch_<Name>s();
    super.onInit();
  }

  void assignCurrentUser() async {
    User? secureData = await _localSecureStorage.getUser;
    currentUser.value = secureData;
    update();
  }

  void logoutUser() {
    _authService.logout();
    Get.offAllNamed(Routes.login);
  }

  Profile getProfil() {
    return Profile(
      photo: const AssetImage(ImageRasterPath.avatar1),
      name: currentUser.value != null
          ? currentUser.value!.username.toString()
          : "Loading..",
      email: currentUser.value != null
          ? currentUser.value!.email.toString()
          : "Loading..",
    );
  }

  List<ImageProvider> getMember() {
    return const [
      AssetImage(ImageRasterPath.avatar1),
      AssetImage(ImageRasterPath.avatar2),
      AssetImage(ImageRasterPath.avatar3),
      AssetImage(ImageRasterPath.avatar4),
      AssetImage(ImageRasterPath.avatar5),
      AssetImage(ImageRasterPath.avatar6),
    ];
  }

  List<ChattingCardData> getChatting() {
    return const [
      ChattingCardData(
        image: AssetImage(ImageRasterPath.avatar6),
        isOnline: true,
        name: "Samantha",
        lastMessage: "i added my new tasks",
        isRead: false,
        totalUnread: 100,
      ),
      ChattingCardData(
        image: AssetImage(ImageRasterPath.avatar3),
        isOnline: false,
        name: "John",
        lastMessage: "well done john",
        isRead: true,
        totalUnread: 0,
      ),
      ChattingCardData(
        image: AssetImage(ImageRasterPath.avatar4),
        isOnline: true,
        name: "Alexander Purwoto",
        lastMessage: "we'll have a meeting at 9AM",
        isRead: false,
        totalUnread: 1,
      ),
    ];
  }

  void openDrawer() {
    if (scaffoldKey.currentState != null) {
      scaffoldKey.currentState!.openDrawer();
    }
  }

  void scrollToTop() {
    double start = 0;
    // scrollController.jumpTo(start);
    scrollController.animateTo(
      start,
      duration: const Duration(milliseconds: 100),
      curve: Curves.easeIn,
    );
  }

  SidebarHeaderData getSelectedProject() {
    return SidebarHeaderData(
      projectImage: const AssetImage(ImageRasterPath.logo3),

      projectName: "_<Name>",
      releaseTime: DateTime.now(),
    );
  }

  void search_<Name>s(String query) {
    if (query.isEmpty) {
      fetch_<Name>s();
    } else {
      var filtered_<Name>s = _<name>s.where((_<name>) {
        return _<name>.name.toLowerCase().contains(query.toLowerCase()) ||
            _<name>.pk.toString().contains(query);
      }).toList();
      _<name>s.value = filtered_<Name>s;
    }
  }

  void fetch_<Name>s() async {
    isLoading.value = true;
    try {
      var fetched_<Name>s = await _api.get('_<name>s');
      _<name>s.value = (fetched_<Name>s as List)
          .map((json) => _<Name>.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed! ${e.toString()}');
    } finally {
      isLoading.value = false;
    }
  }

  void add_<Name>(_<Name> _<name>) async {
    isLoading.value = true;
    try {
      var new_<Name> = await _api.post('_<name>s', _<name>.toJson());
      _<name>s.add(_<Name>.fromJson(new_<Name>));
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed: ${e.toString()}');
    } finally {
      isLoading.value = false;
    }
  }

  void update_<Name>(_<Name> _<name>) async {
    isLoading.value = true;
    try {
      var updated_<Name> =
          await _api.put('_<name>s/${_<name>.pk}', _<name>.toJson());
      int index = _<name>s.indexWhere((s) => s.pk == _<name>.pk);
      if (index != -1) {
        _<name>s[index] = _<Name>.fromJson(updated_<Name>);
      }
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed: ${e.toString()}');
    } finally {
      isLoading.value = false;
    }
  }

  void delete_<Name>(int pk) async {
    isLoading.value = true;
    try {
      await _api.delete('_<name>s/$pk');
      _<name>s.removeWhere((_<name>) => _<name>.pk == pk);
    } catch (e) {
      Get.snackbar('Controller Error', 'Failed to delete _<name>');
    } finally {
      isLoading.value = false;
    }
  }
}
